package main

/*
给你一个整数 n ，求恰由 n 个节点组成且节点值从 1 到 n 互不相同的 二叉搜索树 有多少种？返回满足题意的二叉搜索树的种数。
1.动态规划
可以遍历每个数字 ii，将该数字作为树根，将 1 \cdots (i-1)1⋯(i−1) 序列作为左子树，将 (i+1) \cdots n(i+1)⋯n 序列作为右子树。
题目要求是计算不同二叉搜索树的个数。为此，我们可以定义两个函数：
	G(n): 长度为 nn 的序列能构成的不同二叉搜索树的个数。
	F(i, n)F(i,n): 以 ii 为根、序列长度为 nn 的不同二叉搜索树个数 (1 \leq i \leq n)(1≤i≤n)。

	1.不同的二叉搜索树的总数 G(n)G(n)，是对遍历所有 ii (1 \le i \le n)(1≤i≤n) 的 F(i, n)F(i,n) 之和。
	2.G(0)=1,G(1)=1
	3.给定序列 1 \cdots n1⋯n，我们选择数字 i 作为根，则根为 i 的所有二叉搜索树的集合是左子树集合和右子树集合的笛卡尔积
		F(i,n)=G(i−1)⋅G(n−i)
	4.递归表达式
		    	n
        G(n)=   ∑ 	G(i−1)⋅G(n−i)
				i=1

		G(n) 的值依赖于 G(0)⋯G(n−1)。
2.
假设 n 个节点存在二叉排序树的个数是 G (n)，令 f(i) 为以 i 为根的二叉搜索树的个数，则
	G(n) = f(1) + f(2) + f(3) + f(4) + ... + f(n)G(n)=f(1)+f(2)+f(3)+f(4)+...+f(n)
当 i 为根节点时，其左子树节点个数为 i-1 个，右子树节点为 n-i，则
	f(i) = G(i-1)*G(n-i)f(i)=G(i−1)∗G(n−i)
综合两个公式可以得到 卡特兰数 公式
	G(n) = G(0)*G(n-1)+G(1)*(n-2)+...+G(n-1)*G(0)G(n)=G(0)∗G(n−1)+G(1)∗(n−2)+...+G(n−1)∗G(0)
*/

func numTrees(n int) int {
	dp := make([]int, n+1)
	dp[0] = 1
	dp[1] = 1
	for i := 2; i < n+1; i++ {
		for j := 1; j < i+1; j++ {
			dp[i] += dp[j-1] * dp[i-j]
		}
	}
	return dp[n]
}
