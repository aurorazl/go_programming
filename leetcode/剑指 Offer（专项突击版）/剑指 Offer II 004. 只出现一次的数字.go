package main

import "fmt"

/*
给你一个整数数组 nums ，除某个元素仅出现 一次 外，其余每个元素都恰出现 三次 。请你找出并返回那个只出现了一次的元素。

如果是两次，可以用异或运算
哈希表
位图，标记每个数字的出现次数（可以拓展为m,n的问题）
	如果数组中所有数字的第i个数位相加之和能被n整除，那么出现m次的数字的第i个数位一定是0，否则是1。
	左移运算是将一个二进制位的操作数按指定移动的位数向左移位，移出位被丢弃，右边的空位一律补0。
	右移运算是将一个二进制位的操作数按指定移动的位数向右移动，移出位被丢弃，左边移出的空位或者一律补0，或者补符号位，这由不同的机器而定。
*/

func singleNumber(nums []int) int {
	bitNum := make([]int, 64)
	for _, num := range nums {
		for i := 0; i < 64; i++ {
			bitNum[i] += (num >> (63 - i)) & 1 // 1的二进制位数为.....00001
		}
	}
	// bitNum为高位到低位的二进制
	res := 0
	for i := 0; i < 64; i++ {
		res = (res << 1) + bitNum[i]%3 // (二进制转十进制原理)  2^5 2^4 2^3 2^2 2^1 2^0
	}
	return res
}
func main() {
	fmt.Println(singleNumber([]int{-2}))
}
